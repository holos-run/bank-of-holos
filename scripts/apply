#! /bin/bash

# cd to the repository root
TOPLEVEL="$(cd $(dirname "$0") && git rev-parse --show-toplevel)"
cd "$TOPLEVEL"

set -xeuo pipefail

apply() {
  local file="${1%.gen.yaml}.gen.yaml"
  local cluster="${2:-workload}"

  find "deploy/clusters/${cluster}" -name "${file}" \
    | xargs -S1024 -I% -n1 bash -c 'test -s % && echo % || true' \
    | xargs -S1024 -I% -n1 kubectl apply --server-side=true -f %
}

applyDir() {
  local dir="${1}"
  local cluster="${2:-workload}"

  find "deploy/clusters/${cluster}" -type d -name "${dir}" \
    | xargs -I% -n1 kubectl apply --server-side=true -f %
}

# Namespaces first
apply namespaces

# Custom Resource Definitions
apply argocd-crds
apply rollouts-crds
apply gateway-api
apply external-secrets-crds
kubectl wait --for=condition=Established crd --all --timeout=300s

# External Secrets
apply external-secrets
# Cert Manager (CRDs are included)
apply cert-manager
# Wait for cert manager to be available so we can manage the cluster issuer
kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s

# Manage the cluster issuer (local-ca)
apply local-ca
if ! kubectl wait --for=condition=Ready clusterissuer/local-ca --timeout=30s; then
  echo 'Did you forget to apply your local CA?  See: https://holos.run/docs/guides/local-cluster/#reset-the-cluster' >&2
  exit 1
fi

# ArgoCD
apply argocd
apply app-projects
apply rollouts
# Kargo
kubectl wait --for=condition=Available deployment/external-secrets-webhook -n external-secrets --timeout=300s
apply kargo-secrets
apply kargo

# Istio
apply istio-base
apply istiod
apply istio-cni
if ! kubectl wait --for=condition=Ready pod -l k8s-app=istio-cni-node --timeout=300s -n istio-system; then
  echo 'istio-cni-node not ready, try: holos generate component istio-k3d' >&2
  exit 1
fi
apply istio-ztunnel
apply istio-gateway
# Routes should be accepted, but all backends aren't valid yet.
apply httproutes

# ArgoCD Applications
applyDir gitops

## Bank of Holos
# Generate the private-key in-cluster.
apply "secrets"
for env in dev test stage prod; do
  kubectl wait --for=condition=complete job.batch/jwt-key-writer -n "${env}-bank-security" --timeout=300s
done
# Bank Config
apply config
# Bank Databases
apply accounts-db
apply ledger-db

# Bank Backend Services
apply contacts
apply balance-reader
apply userservice
apply ledger-writer
apply transaction-history

# Bank Web Frontend
apply frontend

exit 0
